//
// new queries & existing queries
//
- new_queries = process_new_query_data(all_data, selected, compared, true)
- existing_queries = process_new_query_data(all_data, selected, compared, false)

hr
h1 Overview
= render partial: "analitics/table/overview", locals: {new_queries: new_queries, existing_queries: existing_queries}

//
// queries process for keywords rankings
//
- queries_selected = selected.map{|query| query.attributes.merge(type: 'selected')}
- queries_compared = compared.map{|query| query.attributes.merge(type: 'compared')}
- queries_grouped  = (queries_selected + queries_compared).group_by { |data| data['query'] }
- queries          = process_queries(queries_grouped)

hr
h1 Top Keywords (top 10 based on clicks)
- top_keywords = queries.sort_by { |q| q[:all_clicks] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: top_keywords}

h1 New Keywords (top 10 based on impressions)
- new_keywords = queries.sort_by { |q| q[:all_impressions] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: new_keywords}

h1 Keywords Dissapeared (top 10 based on impressions from past period)
- keywords_dissapeared = queries.sort_by { |q| q[:s_impressions] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: keywords_dissapeared}

h1 Improved Rangkings
- improved_rangkings = queries.select {|q| q[:all_impressions] >= 100 }.sort_by { |r| r[:avg_position] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: improved_rangkings}

h1 Lost Rangkings
- improved_rangkings = queries.select {|q| q[:all_impressions] <= 100 }.sort_by { |r| r[:avg_position] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: improved_rangkings}

/ /
/ / chart section
/ /
/ / - keywords_init = (k_selected + k_compared).group_by { |data| data['date'] }
/ / - keywords = process_keywords_date(keywords_init)