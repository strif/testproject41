//
// new queries
//
- new_queries = process_new_query_data(all_data, selected, compared, true)

//
// existing queries
//
- existing_queries = process_new_query_data(all_data, selected, compared, false)

hr
h1 Overview
table.table.table-bordered
  thead
    tr
      td
      td Total Number of Keywords
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    tr
      td Overall
      td
        = new_queries[:data].count + existing_queries[:data].count
      td
        = total_calculation_process_for("impressions", new_queries, existing_queries)
      td
        = total_calculation_process_for("clicks", new_queries, existing_queries)
      td
        = total_calculation_process_for("ctr", new_queries, existing_queries)
      td
        = total_calculation_process_for("avg_position", new_queries, existing_queries)

    tr
      td New Queries
      td
        = new_queries[:data].count
      td
        = calculation_process_for("impressions", new_queries)
      td
        = calculation_process_for("clicks", new_queries)
      td
        = calculation_process_for("ctr", new_queries)
      td
        = calculation_process_for("avg_position", new_queries)

    tr
      td Existing Queries
      td
        = existing_queries[:data].count
      td
        = calculation_process_for("impressions", existing_queries)
      td
        = calculation_process_for("clicks", existing_queries)
      td
        = calculation_process_for("ctr", existing_queries)
      td
        = calculation_process_for("avg_position", existing_queries)

hr
- k_selected = selected.map{|k| k.attributes.merge(type: 'selected')}
- k_compared = compared.map{|k| k.attributes.merge(type: 'compared')}

- keywords_init = (k_selected + k_compared).group_by { |data| data['query'] }
- keywords = process_keywords(keywords_init)

h1 Top Keywords (top 10 based on clicks)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:all_clicks] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h1 New Keywords (top 10 based on impressions)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:all_impressions] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h1 Keywords Dissapeared (top 10 based on impressions from past period)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:s_impressions] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h1 Improved Rangkings
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.select {|a| a[:all_impressions] >= 100 }.sort_by { |k| k[:avg_position] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h1 Lost Rangkings
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.select {|a| a[:all_impressions] <= 100 }.sort_by { |k| k[:avg_position] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

/
/ chart section
/
/ - keywords_init = (k_selected + k_compared).group_by { |data| data['date'] }
/ - keywords = process_keywords_date(keywords_init)