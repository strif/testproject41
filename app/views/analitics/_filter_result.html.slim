//
// new queries
//
- new_queries = process_new_query_data(all_data, selected, compared, true)

//
// existing queries
//
- existing_queries = process_new_query_data(all_data, selected, compared, false)

hr
h4 Overview
table.table.table-bordered
  thead
    tr
      td
      td Total Number of Keywords
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    tr
      td Overall
      td
        = new_queries[:data].count + existing_queries[:data].count
      td
        = total_calculation_process_for("impressions", new_queries, existing_queries)
      td
        = total_calculation_process_for("clicks", new_queries, existing_queries)
      td
        = total_calculation_process_for("ctr", new_queries, existing_queries)
      td
        = total_calculation_process_for("avg_position", new_queries, existing_queries)

    tr
      td New Queries
      td
        = new_queries[:data].count
      td
        = calculation_process_for("impressions", new_queries)
      td
        = calculation_process_for("clicks", new_queries)
      td
        = calculation_process_for("ctr", new_queries)
      td
        = calculation_process_for("avg_position", new_queries)

    tr
      td Existing Queries
      td
        = existing_queries[:data].count
      td
        = calculation_process_for("impressions", existing_queries)
      td
        = calculation_process_for("clicks", existing_queries)
      td
        = calculation_process_for("ctr", existing_queries)
      td
        = calculation_process_for("avg_position", existing_queries)

hr
- k_selected = selected.map{|k| k.attributes.merge(type: 'selected')}
- k_compared = compared.map{|k| k.attributes.merge(type: 'compared')}

- keywords_init = (k_selected + k_compared).group_by { |data| data['query'] }
- keywords = process_keywords(keywords_init)

h4 Top Keywords (top 10 based on clicks)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:all_clicks] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h4 New Keywords (top 10 based on impressions)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:all_impressions] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h4 Keywords Dissapeared (top 10 based on impressions from past period)
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.sort_by { |k| k[:s_impressions] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h4 Improved Rangkings
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.select {|a| a[:all_impressions] >= 100 }.sort_by { |k| k[:avg_position] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

h4 Lost Rangkings
table.table.table-bordered
  thead
    tr
      td
      td Visibility (Current)
      td Traffic
      td Average CTR
      td Average Position
  tbody
    - keywords.select {|a| a[:all_impressions] <= 100 }.sort_by { |k| k[:avg_position] }.reverse.take(10).each do |keyword|
      tr
        td = keyword[:query]
        td = "#{keyword[:s_impressions]} Impressions #{str_int(keyword[:s_impressions] - keyword[:c_impressions])} (#{get_percent((keyword[:s_impressions] - keyword[:c_impressions]), keyword[:s_impressions])})"
        td = "#{keyword[:s_clicks]} Clicks #{str_int(keyword[:s_clicks] - keyword[:c_clicks])} (#{get_percent((keyword[:s_clicks] - keyword[:c_clicks]), keyword[:s_clicks])})"
        td = "#{keyword[:s_ctr]} #{str_int(keyword[:s_ctr] - keyword[:c_ctr])} (#{get_percent((keyword[:s_ctr] - keyword[:c_ctr]), keyword[:s_ctr])})"
        td = "#{keyword[:s_avg_position]} #{str_int(keyword[:s_avg_position] - keyword[:c_avg_position])} (#{get_percent((keyword[:s_avg_position] - keyword[:c_avg_position]), keyword[:s_avg_position])})"

hr
hr

.row
  .col-md-6

    h4 Rank Distribution (Graph to compare 2 dates)
    | *Number of Keywords per ranking Group

    br

    canvas id="myChart" width="400" height="400"

    br
    | Blue: Position 1-2
    br
    | Yellow: Position 2-4
    br
    | Green:5-10
    br
    | Gray: 10-20
    br
    | Light Gray: >20


    javascript:
      var ctx = document.getElementById("myChart").getContext("2d");
      var data = #{raw create_chart_data(params[:analitic][:end_date], selected.reload.to_a, params[:analitic][:compared_to_end_date], compared.reload.to_a).to_json};

      var myBarChart = new Chart(ctx).StackedBar(data, {
        barValueSpacing : 70,
      });

  .col-md-6
    h4 CTR (only displaying queries with more than 100 impressions )

    table.table.table-bordered
      thead
        tr
          td Position Group
          td CTR
          td CTR from previous period
          td Comparison

      tbody
        - ctr_group_calculation(selected.to_a, compared.to_a).each do |key, value|
          tr
            td = key
            td.ctr-view-helper.color = value[1] || 0
            td.ctr-view-helper.color = value[2] || 0
            td.ctr-view-helper = (value[2] || 0) - (value[1] || 0)

    javascript:
      $('.ctr-view-helper').each(function(){
        if ($(this).hasClass('color')) {
          $(this).css('background-color', "rgba(0,128,0, " + parseInt($(this).text())/100 + ")");
        }
        $(this).append('%');
      })