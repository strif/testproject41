//
// new queries & existing queries processes
//
- new_queries = process_new_query_data(all_data, selected, compared, true)
- existing_queries = process_new_query_data(all_data, selected, compared, false)

hr
h3 Overview
= render partial: "analitics/table/overview", locals: {new_queries: new_queries, existing_queries: existing_queries}

//
// queries process for keywords rankings
//
- queries_selected = selected.map{|query| query.attributes.merge(type: 'selected')}
- queries_compared = compared.map{|query| query.attributes.merge(type: 'compared')}
- queries_grouped  = (queries_selected + queries_compared).group_by { |data| data['query'] }
- queries          = process_queries(queries_grouped)

hr
h3 Top Keywords (top 10 based on clicks)
- top_keywords = queries.sort_by { |q| q[:all_clicks] }.reverse.take(10)
= render partial: "analitics/table/list", locals: {analitics: top_keywords}

.row
  .col-md-6
    hr
    h3 New Keywords (top 10 based on impressions)
    - new_keywords = queries.sort_by { |q| q[:all_impressions] }.reverse.take(10)
    = render partial: "analitics/table/list", locals: {analitics: new_keywords}

  .col-md-6
    hr
    h3 Keywords Dissapeared (top 10 based on impressions from past period)
    - keywords_dissapeared = queries.sort_by { |q| q[:s_impressions] }.reverse.take(10)
    = render partial: "analitics/table/list", locals: {analitics: keywords_dissapeared}

  .col-md-6
    hr
    h3 Improved Rangkings
    - improved_rangkings = queries.select {|q| q[:all_impressions] >= 100 }.sort_by { |r| r[:avg_position] }.reverse.take(10)
    = render partial: "analitics/table/list", locals: {analitics: improved_rangkings}

  .col-md-6
    hr
    h3 Lost Rangkings
    - improved_rangkings = queries.select {|q| q[:all_impressions] <= 100 }.sort_by { |r| r[:avg_position] }.reverse.take(10)
    = render partial: "analitics/table/list", locals: {analitics: improved_rangkings}


.row
  .col-md-6

    h4 Rank Distribution (Graph to compare 2 dates)
    | *Number of Keywords per ranking Group

    br

    canvas id="myChart" width="400" height="400"

    br
    | Blue: Position 1-2
    br
    | Yellow: Position 2-4
    br
    | Green:5-10
    br
    | Gray: 10-20
    br
    | Light Gray: >20


    javascript:
      var ctx = document.getElementById("myChart").getContext("2d");
      var data = #{raw create_chart_data(params[:analitic][:end_date], selected.reload.to_a, params[:analitic][:compared_to_end_date], compared.reload.to_a).to_json};

      var myBarChart = new Chart(ctx).StackedBar(data, {
        barValueSpacing : 70,
      });

  .col-md-6
    h4 CTR (only displaying queries with more than 100 impressions )

    - selected_ctr = queries.select {|q| q[:selected_impressions] > 100 }.sort_by { |r| r[:ctr] }
    - compared_ctr = queries.select {|q| q[:compared_impressions] > 100 }.sort_by { |r| r[:ctr] }
    - combined_ctr = selected_ctr + compared_ctr


    = render partial: "analitics/table/list_ctr", locals: {selected_analitics: selected_ctr, compared_analitics: compared_ctr, combined_analitics: combined_ctr}

    javascript:
      $('.ctr-view-helper').each(function(){
        if ($(this).hasClass('color')) {
          $(this).css('background-color', "rgba(0,128,0, " + parseInt($(this).text())/100 + ")");
        }
        $(this).append('%');
      })
